# Use a more efficient multi-stage build with better layer caching
FROM node:20.18.0-alpine AS base

# Install common dependencies once
RUN apk add --no-cache python3 make g++

FROM base AS frontend-deps
WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm install --legacy-peer-deps --no-audit --prefer-offline

FROM frontend-deps AS frontend-builder
COPY frontend/ .
RUN npm run build

FROM base AS backend-deps
WORKDIR /app/backend
COPY backend/package*.json ./
RUN npm install --no-audit --prefer-offline

FROM backend-deps AS backend-builder
COPY backend/ .
RUN npm run build

FROM base AS backend-prod-deps
WORKDIR /app/backend
COPY backend/package*.json ./
RUN npm install --production --no-audit --prefer-offline --ignore-scripts

FROM nginx:1.25-alpine

# Install only Node.js runtime (not npm)
RUN apk add --no-cache nodejs

# Copy built frontend files
COPY --from=frontend-builder /app/frontend/build /usr/share/nginx/html

# Copy backend files
WORKDIR /app/backend
COPY --from=backend-builder /app/backend/dist ./dist
COPY --from=backend-builder /app/backend/package*.json ./
COPY --from=backend-builder /app/backend/database ./database
COPY --from=backend-prod-deps /app/backend/node_modules ./node_modules

# Copy nginx configuration with API proxying
COPY nginx-combined.conf /etc/nginx/conf.d/default.conf

# Copy startup script
COPY start.sh /start.sh
RUN chmod +x /start.sh

EXPOSE 80

CMD ["/start.sh"]